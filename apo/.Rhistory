library(survival)
library(survminer)
data('lung')
head(lung)
fit <- survfit(Surv(time, status) ~ sex, data = lung)
print(fit)
lung
print(fit)
sum(lung$status==2)
lung$status
sum(lung$sex==1)
summary(fit)
View(lung)
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF")
)
chooseCRANmirror(local.only = T)
install.packages('BioCircos')
chooseCRANmirror(local.only = T)
install.packages('BioCircos')
install.packages('BioCircos')
chooseCRANmirror(local.only = T)
install.packages('BioCircos')
shiny::runApp('D:/GitHub/shinyCircos-master')
chooseCRANmirror(local.only = T)
install.packages('RLumShiny')
chooseCRANmirror(local.only = T)
install.packages('RLumShiny')
runApp('D:/GitHub/shinyCircos-master')
install.packages('raster')
chooseCRANmirror(local.only = T)
install.packages('raster')
chooseCRANmirror(local.only = T)
install.packages('raster')
find_rtools
pkgbuild::find_rtools(debug = TRUE)
install.packages('raster')
install.packages("C:/Users/DELL/Desktop/raster_2.9-22.zip", repos = NULL, type = "win.binary")
runApp('D:/GitHub/shinyCircos-master')
shiny::runApp('D:/GitHub/shinyCircos-master')
shiny::runApp('D:/GitHub/shinyCircos-master')
shiny::runApp('D:/GitHub/shinyCircos-master')
shiny::runApp('D:/GitHub/shinyCircos-master',quiet = T)
get.gpar()
library(grid)
get.gpar()
library("BiocInstaller", lib.loc="D:/Program Files (x86)/R-3.5.2/library")
chooseBioCmirror(local.only = T)
biocLite('ComplexHeatmap')
library("ComplexHeatmap", lib.loc="D:/Program Files (x86)/R-3.5.2/library")
remove.packages("ComplexHeatmap")
install.packages("C:/Users/DELL/Desktop/ComplexHeatmap_2.0.0.zip", repos = NULL, type = "win.binary")
library("ComplexHeatmap", lib.loc="D:/Program Files (x86)/R-3.5.2/library")
remove.packages('colorspace')
chooseCRANmirror(local.only = T)
install.packages('colorspace')
biocLite('colorspace')
chooseCRANmirror(local.only = T)
install.packages('colorspace')
remove.packages('colorspace')
install.packages("C:/Users/DELL/AppData/Local/Temp/RtmpwHznvt/downloaded_packages/colorspace_1.4-1.zip", repos = NULL, type = "win.binary")
.libPaths()
.libPaths(c(.libPaths(),'D:/Program Files (x86)/R-3.5.2/library/'))
librar(ComplexHeatmap)
library(ComplexHeatmap)
.libPaths()
c(.libPaths(),'D:/Program Files (x86)/R-3.5.2/library/')
.libPaths(c(.libPaths(),'D:/Program Files (x86)/R-3.5.2/library/'))
.libPaths()
.libPaths()
chooseCRANmirror(local.only = T)
chooseCRANmirror(local.only = T)
install.packages('stringi')
chooseCRANmirror(local.only = T)
install.packages('stringi')
install.packages('stringi')
chooseCRANmirror(local.only = T)
install.packages('stringi')
library(iheatmapr)
library(datasets)
library(reshape2)
Indometh_matrix <- acast(Indometh, Subject ~ time, value.var = "conc")
Indometh_matrix <- Indometh_matrix[as.character(1:6),]
rownames(Indometh_matrix) <- paste("Patient",rownames(Indometh_matrix))
Indometh_patient_cor <- cor(t(Indometh_matrix))
patient_max_conc <- apply(Indometh_matrix,1,max)
patient_min_conc <- apply(Indometh_matrix,1,min)
patient_groups <- c("A","A","B","A","B","A") # Arbitrary groups
library(iheatmapr)
library(datasets)
library(reshape2)
Indometh_matrix <- acast(Indometh, Subject ~ time, value.var = "conc")
Indometh_matrix <- Indometh_matrix[as.character(1:6),]
rownames(Indometh_matrix) <- paste("Patient",rownames(Indometh_matrix))
Indometh_patient_cor <- cor(t(Indometh_matrix))
patient_max_conc <- apply(Indometh_matrix,1,max)
patient_min_conc <- apply(Indometh_matrix,1,min)
patient_groups <- c("A","A","B","A","B","A") # Arbitrary groups
chooseCRANmirror(local.only = T)
install.packages('iheatmapr')
library(iheatmapr)
library(datasets)
library(reshape2)
Indometh_matrix <- acast(Indometh, Subject ~ time, value.var = "conc")
Indometh_matrix <- Indometh_matrix[as.character(1:6),]
rownames(Indometh_matrix) <- paste("Patient",rownames(Indometh_matrix))
Indometh_patient_cor <- cor(t(Indometh_matrix))
patient_max_conc <- apply(Indometh_matrix,1,max)
patient_min_conc <- apply(Indometh_matrix,1,min)
patient_groups <- c("A","A","B","A","B","A") # Arbitrary groups
main_heatmap(Indometh_patient_cor,name = "Correlation") %>%
add_col_clustering() %>%
add_row_clustering(k = 3) %>%
add_row_title("Patients") %>%
add_col_title("Patients") %>%
add_row_annotation(data.frame("Max" = patient_max_conc,
"Min" = patient_min_conc,
"Groups" = patient_groups)) %>%
add_main_heatmap(Indometh_matrix,
name = "Indometacin<br>Concentration") %>%
add_col_labels() %>%
add_col_title("Time") %>%
add_col_summary()
main_heatmap(Indometh_patient_cor,name = "Correlation")
main_heatmap(Indometh_patient_cor,name = "Correlation")%>%add_row_clustering(k=3)
main_heatmap(Indometh_patient_cor,name = "Correlation",colorbar_position = 2)
main_heatmap(Indometh_patient_cor,name = "Correlation",colorbar_position = 3)
main_heatmap(Indometh_patient_cor,name = "Correlation",colorbar_position = 4)
main_heatmap(Indometh_patient_cor,name = "Correlation",colorbar_position = 6)
main_heatmap(Indometh_patient_cor,name = "Correlation",colorbar_position = 100)
main_heatmap(Indometh_patient_cor,name = "Correlation",colorbar_position = 10)
main_heatmap(Indometh_patient_cor,name = "Correlation",colorbar_position = 10,orientation='horizontal')
main_heatmap(Indometh_patient_cor,name = "Correlation",colorbar_position = 2,orientation='horizontal')
m = matrix(rnorm(100), 10)
ha1 = HeatmapAnnotation(foo1 = runif(10), bar1 = sample(c("f", "m"), 10, replace = TRUE))
ha2 = HeatmapAnnotation(foo2 = runif(10), bar2 = sample(c("f", "m"), 10, replace = TRUE))
ht_list = Heatmap(m, name = "mat1", top_annotation = ha1) +
rowAnnotation(sth = runif(10)) +
Heatmap(m, name = "mat2", top_annotation = ha2)
draw(ht_list, heatmap_legend_side = "left", annotation_legend_side = "bottom")
library(ComplexHeatmap)
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
library(ComplexHeatmap)
m = matrix(rnorm(100), 10)
ha1 = HeatmapAnnotation(foo1 = runif(10), bar1 = sample(c("f", "m"), 10, replace = TRUE))
ha2 = HeatmapAnnotation(foo2 = runif(10), bar2 = sample(c("f", "m"), 10, replace = TRUE))
ht_list = Heatmap(m, name = "mat1", top_annotation = ha1) +
rowAnnotation(sth = runif(10)) +
Heatmap(m, name = "mat2", top_annotation = ha2)
draw(ht_list, heatmap_legend_side = "left", annotation_legend_side = "bottom")
ht_list
library("BiocInstaller", lib.loc="D:/Program Files (x86)/R-3.5.2/library")
chooseCRANmirror(local.only = T)
biocLite('IlluminaHumanMethylation450kmanifest')
library(IlluminaHumanMethylation450kmanifest)
install.packages('minfi')
biocLite('minfi')
library(IlluminaHumanMethylation450kmanifest)
library(MethylMix)
Download_DNAmethylation
chooseCRANmirror(local.only = T)
install.packages('grImport2 ')
install.packages('grImport2')
install.packages("C:/Users/DELL/Desktop/grImport_0.9-2.zip", repos = NULL, type = "win.binary")
library(grImport)
library("grImport", lib.loc="D:/Program Files (x86)/R-3.5.2/library")
remove.packages("grImport")
install.packages('grImport2')
chooseCRANmirror(local.only = T)
install.packages('grImport2')
chooseCRANmirror(local.only = T)
install.packages('grImport2')
chooseCRANmirror(local.only = T)
install.packages('grImport2')
chooseCRANmirror(local.only = T)
install.packages('grImport2')
library(TCGAbiolinksGUI)
sessionInfo()
shiny::runApp('D:/课题/LA-api/apo')
runApp('D:/课题/LA-api/apo')
install.package('shinyWidgets')
install.packages('shinyWidgets')
runApp('D:/课题/LA-api/apo')
actionButton
runApp('D:/课题/LA-api/apo')
actionButton
runApp('D:/课题/LA-api/apo')
input$ceRNA_seperator
input$ceRNA_seprator_cus
runApp('D:/课题/LA-api/apo')
runApp('D:/课题/LA-api/apo')
runApp('D:/课题/LA-api/apo')
input
input$express_preview
class(input$express_preview)
library(biomaRt)
ensembl=useMart(biomart = 'ensembl')
toJson
library(jsonlite)
ensembl=useMart(biomart='ensembl',)
archieve=listEnsemblArchives()
special=listDatasets(ensembl)
View(archieve)
View(special)
listFilters()
listFilters(ensembl)
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
filters=listFilters()
filters=listFilters(ensembl)
filters=listFilters(mart)
View(filters)
View(archieve)
View(filters)
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
library("TCGAbiolinksGUI", lib.loc="D:/Program Files (x86)/R-3.5.2/library")
TCGAbiolinksGUI()
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
shiny::runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
out
ensemblObj
ensemblObj$out
ensemblObj$ensembl
ensemblObj$ensembl()
runApp('D:/LA-api/apo')
out
runApp()
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
shiny::runApp('D:/LA-api/apo')
useMart(biomart='ensembl',ensemblRedirect=T)
shiny::runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
input
input$database
runApp('D:/LA-api/apo')
input
input$database
runApp('D:/LA-api/apo')
input$database
input$database
input$database
runApp('D:/LA-api/apo')
input$database
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
View(attr)
unique(page)
unique(page)
unique(attr$page)
View(attr)
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
data=data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
View(data)
t=apply(X = data,MARGIN = 1,FUN = list)
t[[1]]
runApp('D:/LA-api/apo')
d[[1]]
do.call(what = c,args = d)
t=do.call(what = c,args = d)
t[[1]]
runApp('D:/LA-api/apo')
runApp('D:/LA-api/apo')
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
rm(list=ls())
gc()
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
library(biomaRt)
ensembl=useMart(biomart='ensembl',dataset = 'hsapiens_gene_ensembl',host='www.ensembl.org',ensemblRedirect=T)
setwd("D:/LA-api/apo")
load('ph1.RData')
