dd=c(text=g,children=t(tmpattr))
result=c(result,list(dd))
}
result=list(result=result)
print(toJSON(result,auto_unbox = T,dataframe = 'columns'))
attr=listAttributes(ensembl)
group=unique(attr$page)
result=list()
for(g in group)
{
tmpattr=attr[which(attr$page==g),]
tmpattr=data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
dd=c(text=g,children=t(tmpattr))
result=c(result,list(dd))
}
result=list(result=result)
print(toJSON(result,auto_unbox = T))
attr=listAttributes(ensembl)
group=unique(attr$page)
result=list()
for(g in group)
{
tmpattr=attr[which(attr$page==g),]
tmpattr=data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
dd=c(text=g,children=tmpattr)
result=c(result,list(dd))
}
result=list(result=result)
print(toJSON(result,auto_unbox = T))
attr=listAttributes(ensembl)
group=unique(attr$page)
result=list()
for(g in group)
{
tmpattr=attr[which(attr$page==g),]
tmpattr=data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
tmpattr=apply(X = tmpattr,MARGIN = 1,FUN = list)
dd=c(text=g,children=tmpattr)
result=c(result,list(dd))
}
result=list(result=result)
print(toJSON(result,auto_unbox = T))
View(tmpattr)
attr=listAttributes(ensembl)
group=unique(attr$page)
result=list()
for(g in group)
{
tmpattr=attr[which(attr$page==g),]
tmpattr=data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
tmpattr=apply(X = tmpattr,MARGIN = 1,FUN = list)
tmpattr=do.call(what = c,args = tmpattr)
dd=c(text=g,children=tmpattr)
result=c(result,list(dd))
}
result=list(result=result)
print(toJSON(result,auto_unbox = T))
tmpattr=attr[which(attr$page==g),]
View(tmpattr)
tmpattr=data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
tmpattr=apply(X = tmpattr,MARGIN = 1,FUN = list)
tmpattr[[1]]
tmpattr=do.call(what = c,args = tmpattr)
tmpattr[[1]]
class(tmpattr)
toJSON(tmpattr[[1]])
ensembl=useMart(biomart='ensembl',dataset = 'hsapiens_gene_ensembl',host='www.ensembl.org',ensemblRedirect=T)
attr=listAttributes(ensembl)
group=unique(attr$page)
result=list()
library(biomaRt)
ensembl=useMart(biomart='ensembl',dataset = 'hsapiens_gene_ensembl',host='www.ensembl.org',ensemblRedirect=T)
attr=listAttributes(ensembl)
group=unique(attr$page)
result=list()
g=group[1]
tmpattr=attr[which(attr$page==g),]
tmpattr=data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
tmpattr
typeof(tmpattr)
class(tmpattr)
library(jsonlite)
toJSON(x = head(tmpattr))
dd=list(text=g,children=tmpattr)
toJSON(dd)
toJSON(dd,auto_unbox = T)
result=list()
for(g in group)
{
tmpattr=attr[which(attr$page==g),]
tmpattr=data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
dd=list(text=g,children=tmpattr)
result=c(result,list(dd))
}
result=list(result=result)
print(toJSON(result,auto_unbox = T))
str=toJSON(result,auto_unbox = T))
obj=fromJSON(str)
str=toJSON(result,auto_unbox = T)
obj=fromJSON(str)
View(obj)
attr=listAttributes(ensembl)
group=unique(attr$page)
result=list()
for(g in group)
{
tmpattr=attr[which(attr$page==g),]
tmpattr=data.frame(id=tmpattr$name,text=paste(tmpattr$name,tmpattr$description,sep=":"),stringsAsFactors = F)
dd=list(text=g,children=tmpattr)
result=c(result,list(dd))
}
result=list(results=result)
print(toJSON(result,auto_unbox = T))
shiny::runApp('apo')
group
runApp('apo')
runApp('apo')
runApp('apo')
runApp('apo')
shiny::runApp('apo')
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
shiny::runApp('apo')
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
shiny::runApp('apo')
runApp('apo')
runApp('apo')
getwd()
source('www/R/customerUI.R')
getwd()
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
shiny::runApp('apo')
getwd()
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
shiny::runApp('apo')
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
library(biomaRt)
ensembl=useMart(biomart='ensembl',dataset = 'hsapiens_gene_ensembl',host='asia.ensembl.org',ensemblRedirect=F)
ensembl=useMart(biomart='ensembl',dataset = 'hsapiens_gene_ensembl',host='asia.ensembl.org',ensemblRedirect=F)
chooseCRANmirror(local.only = T)
install.packages('plotly')
chooseCRANmirror(local.only = T)
install.packages('plotly')
library(rvest)
read_html(x = 'https://www.baidu.com')
ensembl=useMart(biomart='ensembl',dataset = 'hsapiens_gene_ensembl',host='asia.ensembl.org',ensemblRedirect=F)
shiny::runApp('apo')
runApp('apo')
ensembl=useMart(biomart='ensembl',dataset = 'hsapiens_gene_ensembl',host='asia.ensembl.org',ensemblRedirect=F)
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
shiny::runApp('apo')
runApp('apo')
shiny::runApp('apo')
runApp('apo')
paste("names",4)
source('www/R/customerUI.R')
setwd("D:/LA-api/apo")
source('www/R/customerUI.R')
runApp()
source('www/R/customerUI.R')
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
tags$button(value),
p(subtitle)
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
runApp()
runApp()
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),id= inputId,
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
a(
h2(value),
p(subtitle)
)
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),id= inputId,
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
a(
h2(value),
p(subtitle)
)
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
value_BoxInput <- function(value, subtitle, icon, color='aqua', width = 4,inputId){
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),id= inputId,
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
a(
h2(value),
p(subtitle)
)
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
}
runApp()
runApp()
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),id= inputId,
a(
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
h3(value),
p(subtitle)
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
)
runApp()
runApp()
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),id= inputId,
a(
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
h3(value),
h4(subtitle)
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
)
runApp()
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),id= inputId,
a(
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
h3(value),
h4(subtitle,style ="font-family: sans-serif")
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
)
runApp()
runApp()
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),id= inputId,
a(
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
h3(value),
h4(subtitle,style ="font-family: Georgia")
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
)
runApp()
runApp()
runApp()
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),id= inputId,
a(
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
h3(value),
h4(subtitle,style ="font-family: Georgia;font-weight:bold")
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
)
value_BoxInput <- function(value, subtitle, icon, color='aqua', width = 4,inputId){
tagList(
singleton(
tags$head(
tags$script(src = "js/customerUI.js")
)
),
div(class=paste("col-sm-",width,sep = ""),id= inputId,
a(
div(class=paste('value_BoxInput small-box bg-',color,sep = ""),style=paste("width:'",width,"'",sep=""),
div(class="inner",
h3(value),
h4(subtitle,style ="font-family: Georgia;font-weight:bold")
),
div(class="icon-large",
tags$i(class=paste("fab fa-",icon,sep = ""))
)
)
)
)
)
}
runApp()
runApp()
runApp()
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
shiny::runApp('apo')
runApp('apo')
rna.exp=rna.exp
micro.exp=micro.exp
target=target
geneinfo=geneinfo
select.gene=select.gene
save.image(file = 'ph1.RData')
View(geneinfo)
geneinfo
save('geneinfo','micro.exp','rna.exp','target','select.gene')
save('geneinfo','micro.exp','rna.exp','target','select.gene',file = 'ph1.RData')
parent.frame()
parent.env()
environment()
parent.env(environment())
tparent.env(environment())
t=parent.env(environment())
t=parent.env(environment())
save('geneinfo','micro.exp','rna.exp','target','select.gene',file = 'ph1.RData',envir = parent.env(environment()))
load('apo/ph1.RData')
runApp('apo')
if (interactive()) {
library(shiny)
library(shinyWidgets)
data("mpg", package = "ggplot2")
ui <- fluidPage(
fluidRow(
column(
width = 10, offset = 1,
tags$h3("Filter data with selectize group"),
panel(
selectizeGroupUI(
id = "my-filters",
params = list(
manufacturer = list(inputId = "manufacturer", title = "Manufacturer:"),
model = list(inputId = "model", title = "Model:"),
trans = list(inputId = "trans", title = "Trans:"),
class = list(inputId = "class", title = "Class:")
)
), status = "primary"
),
dataTableOutput(outputId = "table")
)
)
)
server <- function(input, output, session) {
res_mod <- callModule(
module = selectizeGroupServer,
id = "my-filters",
data = mpg,
vars = c("manufacturer", "model", "trans", "class")
)
output$table <- renderDataTable(res_mod())
}
shinyApp(ui, server)
}
runApp('apo')
updateSelectInput
runApp('apo')
runApp('apo')
multiInput
attachShinyWidgetsDep
attachShinyWidgetsDep
runApp('apo')
runApp('apo')
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
shiny::runApp('apo')
runApp('apo')
runApp('apo')
msg=input$show_biotype_group
msg$data
msg=input$show_biotype_group
msg$data
msg$data$`345`
unlist(msg$data$`345`)
msg=input$show_biotype_group
})
msg=input$show_biotype_group
msg$data
msg=input$show_biotype_group
msg$data
1:10 %ni% c(1,5,10)
''
msg$data
1:10 %ni% c(1,5,10)
sect_output_geneinfo
sect_output
geneinfo
sect_output_geneinfo
runApp('apo')
runApp('apo')
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
library(biomaRt)
shiny::runApp('apo')
View(sect_output_geneinfo)
environment()
parent.env(environment())
ls(envir = parent.env(environment()))
save('rna.exp','micro.exp','geneinfo','target','select.gene',file = 'ph1.RData',envir = parent.env(environment()))
runApp('apo')
View(sect_output_geneinfo)
ggplot(data =sect_output_geneinfo)+geom_bar(mapping = aes(x = .biotype))
Q
runApp('apo')
ggplot(data =sect_output_geneinfo)+geom_bar(mapping = aes(x = .biotype,color='gene_biotype'))
ggplot(data =sect_output_geneinfo)+geom_bar(mapping = aes(x = .biotype,fill='gene_biotype'))
ggplot(data =sect_output_geneinfo)+geom_bar(mapping = aes_string(x = '.biotype',fill='gene_biotype'))
library(plotly)
ggplotly(ggplot(data =sect_output_geneinfo)+geom_bar(mapping = aes_string(x = '.biotype',fill='gene_biotype')))
runApp('apo')
View(sect_output_geneinfo)
data
dim(rna.exp)
dim(micro.exp)
p
p=ggplot(data =sect_output_geneinfo)+geom_bar(mapping = aes_string(x = '.biotype',fill=biotype))+
theme(legend.position = 'bottom')
ggplotly(p,tooltip='c('x','y')
ggplotly(p,tooltip='c('x','y'))
ggplotly(p,tooltip=c('x','y'))
plotly_example("shiny", "ggplotly_sizing")
p
p
print(p)
dev.off()
p
dev.off()
dev.off()
.libPaths('D:/Program Files (x86)/R-3.5.2/library')
shiny::runApp('apo')
paste0(getwd(),'ph1.svg',sep="/")
paste0(getwd(),'ph1.svg',sep="//")
getwd()
paste(getwd(),'ph1.svg',sep="\\")
